/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CONTROL_MODEVIEWBASE_HPP
#define CONTROL_MODEVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/control_mode_screen/CONTROL_MODEPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class CONTROL_MODEViewBase : public touchgfx::View<CONTROL_MODEPresenter>
{
public:
    CONTROL_MODEViewBase();
    virtual ~CONTROL_MODEViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Back_seclect_mode;
    touchgfx::BoxProgress Motor;
    touchgfx::TextArea MODE_control;
    touchgfx::TextAreaWithOneWildcard motor_val;
    touchgfx::BoxProgress bldc;
    touchgfx::TextAreaWithOneWildcard bldc_val;
    touchgfx::TextAreaWithOneWildcard pressure;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  Next_parameter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t MOTOR_VAL_SIZE = 5;
    touchgfx::Unicode::UnicodeChar motor_valBuffer[MOTOR_VAL_SIZE];
    static const uint16_t BLDC_VAL_SIZE = 5;
    touchgfx::Unicode::UnicodeChar bldc_valBuffer[BLDC_VAL_SIZE];
    static const uint16_t PRESSURE_SIZE = 5;
    touchgfx::Unicode::UnicodeChar pressureBuffer[PRESSURE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<CONTROL_MODEViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // CONTROL_MODEVIEWBASE_HPP
